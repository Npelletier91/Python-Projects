cat("accuray of this model is:", accuracy)
cat("accuray of this model is:", accuracy, "%")
seed = seed[]
set.seed(seed)
seed = 123
set.seed(seed)
cat("The accuray of seed", seed, "model is:", accuracy, "%")
seed = 12
set.seed(seed)
cat("The accuray of seed", seed, "model is:", accuracy, "%")
seed = 12
set.seed(seed)
train_data = sample(1:nrow(iris), 0.7 * nrow(iris))
training_data = iris[train_data, ]
testing_data = iris[-train_data, ]
naive_model = naiveBayes(Species ~ ., data = training_data)
predicted = predict(naive_model, newdata = testing_data)
accuracy = sum(predicted == testing_data$Species) / nrow(testing_data) * 100
cat("The accuray of seed", seed, "model is:", accuracy, "%")
seed = 1234
set.seed(seed)
train_data = sample(1:nrow(iris), 0.7 * nrow(iris))
training_data = iris[train_data, ]
testing_data = iris[-train_data, ]
naive_model = naiveBayes(Species ~ ., data = training_data)
predicted = predict(naive_model, newdata = testing_data)
accuracy = sum(predicted == testing_data$Species) / nrow(testing_data) * 100
cat("The accuray of seed", seed, "model is:", accuracy, "%")
cat("The accuray of seed the", seed, "model is:", accuracy, "%")
cat("The accuray of the seed", seed, "model is:", accuracy, "%")
View(iris)
new_plant = data.frame(
Sepal.Length = 3.5,
Sepal.Width = 5,
Pedal.Length = 4,
Pedal.Width = 6
)
new_prediction = predict(naive_model, newdata = new_plant)
trainer_data = iris$[ ,-5]
trainer_data = iris[ ,-5]
View(trainer_data)
nb_model = naiveBayes(Species ~ ., trainer_data)
nb_model = naiveBayes(iris$Species ~ ., trainer_data)
new_plant = data.frame(
Sepal.Length = 3.5,
Sepal.Width = 5,
Pedal.Length = 4,
Pedal.Width = 6
)
new_prediction = predict(nb_model, newdata = new_plant)
View(new_plant)
View(trainer_data)
new_plant = data.frame(
Sepal.Length = 3.5,
Sepal.Width = 5,
Petal.Length = 4,
Petal.Width = 6
)
new_prediction = predict(nb_model, newdata = new_plant)
new_prediction
new_prediction = predict(nb_model, new_plant)
new_prediction
cat("The new data is", new_prediction)
cat("The new data is", level[new_prediction])
cat("The new data is", levels[new_prediction])
cat("The new data is", levels(new_prediction)
cat("The new data is", levels(new_prediction))
trainer_data = iris[ ,-5]
nb_model = naiveBayes(Species ~ ., trainer_data)
new_plant = data.frame(
Sepal.Length = 3.5,
Sepal.Width = 5,
Petal.Length = 4,
Petal.Width = 6
)
new_prediction = predict(nb_model, new_plant)
cat("The new data is", new_prediction)
cat("The new data is", levels(iris$Species)[new_prediction])
trainer_data = iris[ ,-5]
nb_model = naiveBayes(Species ~ ., trainer_data)
new_plant = data.frame(
Sepal.Length = 3.5,
Sepal.Width = 5,
Petal.Length = 4,
Petal.Width = 6
)
new_prediction = predict(nb_model, new_plant)
cat("The new data is", levels(iris$Species)[new_prediction])
my_array = c(4,7,2,5,9,12)
my_array = c(4,7,2,5,9,12)
sorting_func = function(){
for (i in 1:length(my_array)) - 1 {
for (j in 1:length(my_array) - 1){
if (my_array[j] > my_array[j + 1]){
temporary = my_array[j]
my_array[j] = my_array[j + 1]
my_array[j + 1] = temporary
}
}
}
print(my_array)
}
sorting_func()
my_array = c(4,7,2,5,9,12)
sorting_func = function(){
for (i in 1:length(my_array)) - 1 {
for (j in 1:length(my_array) - i){
if (my_array[j] > my_array[j + 1]){
temporary = my_array[j]
my_array[j] = my_array[j + 1]
my_array[j + 1] = temporary
}
}
}
print(my_array)
}
sorting_func()
n = length(my_array)
my_array = c(4,7,2,5,9,12)
sorting_func = function(my_array) {
n = length(my_array)
for (i in 1:(n - 1)) {
for (j in 1:(n - i)) {
if (my_array[j] > my_array[j + 1]) {
temporary = my_array[j]
my_array[j] = my_array[j + 1]
my_array[j + 1] = temporary
}
}
}
print(my_array)
}
sorting_func(my_array)
R --version
R.version
l <- TRUE
i <- 123L
c <- "ABC 123"
d <- as.data("2024-01-03")
n <- 1.23
d <- as.Date("2024-01-03")
d
x + 1
f <- function(x){
x + 1
}
f(2)
v <- c(1,2,3)
vector <- c(1,2,3)
vector
s <- 1:5
s
matrix <- matrix(
data = 1:6, nrow = 2, ncol = 3
)
matrix
l <- list(TRUE, 123L, 2.34, "abc")
l
df <- data.frame(
Name = c("Cat", "Dog"),
HowMany = c(5,10),
IsPet = c(TRUE, TRUE)
)
df
df[1,2]
df$HowMany
library(dplyr)
cars <- mtcars
cars <- read.table(
file = "Cars.txt",
header = TRUE,
sep = "\t",
quote = "\""
)
head(cars)
head(cars)
library(dplyr)
View(cars)
temp <- select(
.data = cars,
am,
cyl,
mpg
)
head(temp)
temp <- filter(
.data = temp,
am = 0
)
temp <- filter(
.data = temp,
am == 0
)
head(temp)
temp <- mutate(
.data = temp,
Comsumption = mp * 0.425
)
temp <- mutate(
.data = temp,
Comsumption = mpg * 0.425
)
head(temp)
temp <- mutate(
.data = temp,
Consumption = mpg * 0.425
)
head(temp)
temp <- group_by(
.data =temp,
Avg.Consumption = mean(Consumption)
)
head(temp)
temp <- group_by(
.data =temp,
cyl)
head(temp)
cars <- mtcars
head(cars)
library(dplyr)
temp <- select(
.data = cars,
am,
cyl,
mpg
)
head(temp)
temp <- filter(
.data = temp,
am == 0
)
temp <- mutate(
.data = temp,
Consumption = mpg * 0.425
)
head(temp)
temp <- group_by(
.data =temp,
cyl
)
head(temp)
View(cars)
temp <- summarize(
.data = temp,
Avg.Consumption = mean(Consumption)
)
head(temp)
temp <- arrange(
.data = temp,
desc(Avg.Consumption)
)
head(temp)
head(temp)
effeciency <- as.data.frame(temp)
efficiency
effeciency
print(effeciency)
write.csv(
x = effeciency,
file = "Fuel Effeciency File",
row.names = FALSE
)
setwd("C:\Users\Nicol\Documents\GitHub Repos\AI-Projects\R files")
setwd("C:/Users/Nicol/Documents/GitHub Repos/AI-Projects/R files")
write.csv(
x = effeciency,
file = "Fuel Efficiency File",
row.names = FALSE
)
cars <- mtcars
library(ggplot2)
ylab("Count of Cars")
ggplot(
data = cars,
aes(x = am)) +
geom_bar() +
ggtitle("Count of cars by transmission type")
xlab("Transmission Type")
ylab("Count of Cars")
ggplot(
data = cars,
aes(x = am)) +
geom_bar() +
ggtitle("Count of cars by transmission type") +
xlab("Transmission Type") +
ylab("Count of Cars")
data(Iris)
data(iris)
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
main = "legth vs width",
xlab = "petal length",
ylab = "petal width"
)
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
main = "legth vs width",
xlab = "petal length",
ylab = "petal width"
)
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
main = "legth vs width",
xlab = "petal length",
ylab = "petal width"
)
cor(
x = iris$Petal.Length,
y = iris$Petal.Width
)
library(ff)
install.packages(ff)
install.packages("biglm")
install.packages("ff")
library(ff)
library(ff)
library(biglm)
irisff <- read.table.ffdf(
file = "Iris.csv",
FUN = "read.csv")
model <- biglm(
formula = Petal.Width ~ Petal.Length,
data = irisff
)
summary(model)
plot(
x = irisff$Petal.Length[],
y = irisff$Petal.Width[]
)
b <- summary(model)$mat[1,1]
m <- summary(model)$mat[2,1]
lines(
x = irisff$Petal.Length[],
y = m * irisff$Petal.Length[] + b,
col = "red",
lwd = 3
)
lines(
x = irisff$Petal.Length[],
y = m * irisff$Petal.Length[] + b,
col = "red",
lwd = 3
)
plot(
x = irisff$Petal.Length[],
y = irisff$Petal.Width[]
)
lines(
x = irisff$Petal.Length[],
y = m * irisff$Petal.Length[] + b,
col = "red",
lwd = 3
)
predict(
object = model,
newdata = data.frame(
Petal.Length = c(2,5,7),
Petal.Width = c(0,0,0)
)
)
plot(
x = irisff$Petal.Length[],
y = irisff$Petal.Width[]
)
data(mtcars)
cars = mtcars
View(cars)
set.seed(42)
set.seed(42)
train_data <- sample(
x = cars[1:150],
size = 100
)
train_data <- sample(
x = cars,
size = 100
)
train_data <- sample(
x = cars,
size = cars * .7
)
train_data <- sample(
x = cars,
size = nrow(cars) * .7
)
train_data <- sample(
x = nrow(cars),
size = nrow(cars) * .7
)
cars = mtcars
set.seed(42)
train_indices <- sample(
x = nrow(cars),
size = nrow(cars) * .7
)
train_data <- cars[train_indices, ]
test_data <- cars[-train_indices, ]
print(nrow(cars))
?sample
model <- lm(
mpg ~ ., data = train_data
)
View(model)
summarise(model)
summary(model)
new_car <- data.frame(mpg = NA, cyl = 6, hp = 150)
predicted_mpg <- predict(model, newdata = new_car_data)
predicted_mpg <- predict(model, newdata = new_car)
new_car <- data.frame(mpg = NA, cyl = 6, disp = 200, hp = 150)
predicted_mpg <- predict(model, newdata = new_car)
subtset_data = cars[c("mpg", "cyl", "hp")]
train_indices <- sample(
x = nrow(subset_data),
size = nrow(subset_data) * .7
)
subtset_data = cars[c("mpg", "cyl", "hp")]
train_indices <- sample(
x = nrow(subset_data),
size = nrow(subset_data) * .7
)
set.seed(42)
train_indices <- sample(
x = nrow(subset_data),
size = nrow(subset_data) * .7
)
subset_data = cars[c("mpg", "cyl", "hp")]
train_indices <- sample(
x = nrow(subset_data),
size = nrow(subset_data) * .7
)
train_data <- subset_data[train_indices, ]
test_data <- subset_data[-train_indices, ]
model <- lm(
mpg ~ ., data = train_data
)
new_car <- data.frame(mpg = NA, cyl = 6, hp = 150)
predicted_mpg <- predict(model, newdata = new_car)
cat("New car mpg is: ", predicted_mpg)
rownames(mtcars)
data(mtcars)
set.seed(41)
train_indices <- sample(
x = nrow(mtcars),
size = nrow(mtcars) * .7
)
train_data <- mtcars[train_indices, ]
test_data <- mtcars[-train_indices, ]
library(datasets)
model <- glm(as.factor(car.name) ~ mpg + cyl + hp, data = train_data, family = "binomial")
model <- glm(as.factor(model) ~ mpg + cyl + hp, data = train_data, family = "binomial")
library(datasets)
library(dplyr)
library(factoextra)
# Load mtcars dataset
data(mtcars)
# Features for clustering
features <- mtcars[, c("mpg", "cyl", "hp")]
# K-means clustering
set.seed(42)
kmeans_model <- kmeans(features, centers = 3)  # Choose appropriate number of clusters
# Add cluster labels to the dataset
mtcars_with_clusters <- mtcars %>%
mutate(cluster = as.factor(kmeans_model$cluster))
# Check the cluster assignment
table(mtcars_with_clusters$cluster)
install.packages("factoextra")
library(datasets)
library(dplyr)
library(factoextra)
# Load mtcars dataset
data(mtcars)
# Features for clustering
features <- mtcars[, c("mpg", "cyl", "hp")]
# K-means clustering
set.seed(42)
kmeans_model <- kmeans(features, centers = 3)  # Choose appropriate number of clusters
# Add cluster labels to the dataset
mtcars_with_clusters <- mtcars %>%
mutate(cluster = as.factor(kmeans_model$cluster))
# Check the cluster assignment
table(mtcars_with_clusters$cluster)
View(cars)
print(cars)
print(cars[ ,1])
print(cars[ , 0])
print(cars[ , 1])
row.names(cars)
row.names(subset_data)
View(subset_data)
model <- lm(
row.names(subset_data) ~ ., data = train_data
)
data(mtcars)
cars = mtcars
subset_data = cars[c("mpg", "cyl", "hp")]
set.seed(42)
train_indices <- sample(
x = nrow(subset_data),
size = nrow(subset_data) * .7
)
train_data <- subset_data[train_indices, ]
test_data <- subset_data[-train_indices, ]
model <- lm(
mpg ~ ., data = train_data
)
summary(model)
new_car <- data.frame(mpg = NA, cyl = 6, hp = 150)
predicted_mpg <- predict(model, newdata = new_car)
cat("New car mpg is: ", predicted_mpg)
